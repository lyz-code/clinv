{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Clinv","text":"<p>DevSecOps command line asset inventory</p>"},{"location":"#installing","title":"Installing","text":"<pre><code>pip install clinv\n</code></pre> <p>Work in progress</p> <p>Lately I've completely rewritten clinv, I'll update the docs as soon as possible.</p>"},{"location":"#references","title":"References","text":"<p>As most open sourced programs, <code>clinv</code> is standing on the shoulders of giants, namely:</p> Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks. Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme. Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer."},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment, and how to make a contribution to clinv, see Contributing to clinv.</p>"},{"location":"#donations","title":"Donations","text":"<p> or </p> <p>If you are using some of my open-source tools, have enjoyed them, and want to say \"thanks\", this is a very strong way to do it.</p> <p>If your product/company depends on these tools, you can sponsor me to ensure I keep happily maintaining them.</p> <p>If these tools are helping you save money, time, effort, or frustrations; or they are helping you make money, be more productive, efficient, secure, enjoy a bit more your work, or get your product ready faster, this is a great way to show your appreciation. Thanks for that!</p> <p>And by sponsoring me, you are helping make these tools, that already help you, sustainable and healthy.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>So you've started using <code>clinv</code> and want to show your gratitude to the project, depending on your programming skills there are different ways to do so.</p>"},{"location":"contributing/#i-dont-know-how-to-program","title":"I don't know how to program","text":"<p>There are several ways you can contribute:</p> <ul> <li>Open an issue if you encounter     any bug or to let us know if you want a new feature to be implemented.</li> <li>Spread the word about the program.</li> <li>Review the documentation and try to improve     it.</li> </ul>"},{"location":"contributing/#i-know-how-to-program-in-python","title":"I know how to program in Python","text":"<p>If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones, check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues, as they are expected to be easier to get into the project.</p> <p>We develop the program with TDD, so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it.</p> <p>We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing:</p> <ul> <li>If you want to develop a new feature, explain how you'd like to do it in the related issue.</li> <li>If you don't know how to test your code, do the pull request without the tests     and we'll try to do them for you.</li> </ul>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead.</p> <p>To make it as simple as possible for us to help you, please include the output of the following call in your issue:</p> <pre><code>python -c \"import clinv.version; print(clinv.version.version_info())\"\n</code></pre> <p>or if you have <code>make</code> installed, you can use <code>make version</code>.</p> <p>Please try to always include the above unless you're unable to install <code>clinv</code> or know it's not relevant to your question or feature request.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>clinv is released regularly so you should see your improvements release in a matter of days or weeks.</p> <p>Note</p> <p>Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request.</p> <p>If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.</p>"},{"location":"contributing/#development-facilities","title":"Development facilities","text":"<p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally.</p> <p>tl;dr: use <code>make format</code> to fix formatting, <code>make</code> to run tests and linting &amp; <code>make docs</code> to build the docs.</p> <p>You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed.</p> <ul> <li> <p>Clone your fork and go into the repository directory:</p> <pre><code>git clone git@github.com:&lt;your username&gt;/clinv.git\ncd clinv\n</code></pre> </li> <li> <p>Set up the virtualenv for running tests:</p> <pre><code>virtualenv -p `which python3.7` env\nsource env/bin/activate\n</code></pre> </li> <li> <p>Install <code>pdm</code> our package manager with the next command or using any of the     other recommended     methods.</p> <pre><code>curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -\n</code></pre> </li> <li> <p>Install clinv, dependencies and configure the     pre-commits:</p> <pre><code>make install\n</code></pre> </li> <li> <p>Checkout a new branch and make your changes:</p> <pre><code>git checkout -b my-new-feature-branch\n</code></pre> </li> <li> <p>Fix formatting and imports: clinv uses     black to enforce formatting and     isort to fix imports.</p> <pre><code>make format\n</code></pre> </li> <li> <p>Run tests and linting:</p> <pre><code>make\n</code></pre> <p>There are more sub-commands in Makefile like <code>test-code</code>, <code>test-examples</code>, <code>mypy</code> or <code>security</code> which you might want to use, but generally <code>make</code> should be all you need.</p> <p>If you need to pass specific arguments to pytest use the <code>ARGS</code> variable, for example <code>make test ARGs='-k test_markdownlint_passes'</code>.</p> </li> <li> <p>Build documentation: If you have changed the documentation, make sure it     builds the static site. Once built it will serve the documentation at     <code>localhost:8000</code>:</p> <pre><code>make docs\n</code></pre> </li> <li> <p>Commit, push, and create your pull request.</p> </li> <li> <p>Make a new release: To generate the changelog of the new changes, build the     package, upload to pypi and clean the build files use <code>make bump</code>.</p> </li> </ul> <p>We'd love you to contribute to clinv!</p>"},{"location":"hacking/","title":"Hacking","text":""},{"location":"hacking/#hacking","title":"Hacking","text":"<p>This program is developed with TDD, so if you want to add code, you would most likely should add tests. If you don't know how, say so in the pull request and we'll try to help you.</p> <p>All classes, methods and modules are meant to have docstrings, so please add them.</p>"},{"location":"migration.notes/","title":"Migration notes","text":""},{"location":"migration.notes/#migration-notes","title":"Migration notes","text":""},{"location":"migration.notes/#051-060","title":"0.5.1 -&gt; 0.6.0","text":"<ul> <li>Services without aws resources must have the <code>aws: {}</code> value in the user_data   yaml. <code>aws: null</code> will fail.</li> </ul>"},{"location":"report/","title":"Report creation","text":""},{"location":"report/#report-creation","title":"Report creation","text":"<p>If you want to see similar reports go to <code>clinv/reports/</code>.</p>"},{"location":"report/#create-the-report-test-class","title":"Create the report test class","text":"<p>On <code>test/reports/</code> create your report class from this template. Substitute <code>{{ class_name }}</code> (for example <code>PrintReport</code>) and <code>{{ module_path }}</code> (for example <code>print</code>) with your values.</p> <pre><code>from tests.reports import ClinvReportBaseTestClass\nfrom clinv.reports.{{ module_path }} import {{ class_name }}\nimport unittest\n\n\nclass Test{{ class_name }}(ClinvReportBaseTestClass, unittest.TestCase):\n'''\n    Test the {{ class_name }} implementation.\n    '''\n\n    def setUp(self):\n        super().setUp()\n        self.report = {{ class_name }}(self.inventory)\n\n    def tearDown(self):\n        super().tearDown()\n\n    def test_output_method(self):\n        self.report.output()\n        self.assertTrue(False)\n</code></pre>"},{"location":"report/#create-the-report-class","title":"Create the report class","text":"<p>On <code>clinv/sources/</code> create your source class from this template. Substitute <code>{{ class_name }}</code> and <code>{{ class_id }}</code> with your values.</p> <pre><code>\"\"\"\nModule to store the {{ class_name }}.\n\nClasses:\n  {{ class_name }}: {{ class_description }}\n\n\"\"\"\n\nfrom clinv.reports import ClinvReport\n\n\nclass {{ class_name }}(ClinvReport):\n\"\"\"\n    {{ class_description }}\n\n    Parameters:\n        inventory (Inventory): Clinv inventory object.\n\n    Public methods:\n        output: Print the report to stdout.\n\n    Public attributes:\n        inv (Inventory): Clinv inventory.\n    \"\"\"\n\n    def __init__(self, inventory):\n        super().__init__(inventory)\n\n    def output(self, resource_id):\n\"\"\"\n        Method to print the report to stdout.\n\n        Parameters:\n            resource_id (str): regular expression of a resource id.\n\n        Returns:\n            stdout: Resource information\n        \"\"\"\n</code></pre>"},{"location":"source/","title":"Source and Resource creation","text":""},{"location":"source/#source-and-resource-creation","title":"Source and Resource creation","text":""},{"location":"source/#create-a-new-source","title":"Create a new source","text":"<p>A source is an abstraction from where we obtain resources and index them into our inventory.</p> <p>For the purpose of this section, we'll assume that the new source we want to add to our inventory is called <code>newsource</code>.</p> <p>If you want to see similar sources go to <code>clinv/sources/</code>.</p>"},{"location":"source/#desired-interface","title":"Desired Interface","text":"<p>To ensure the expected behavior of the sources, the class must follow a common interface. Don't worry if you don't understand yet what does each element mean, you'll discover it as you read the hole document.</p> <p>It must have the following attributes:</p> <ul> <li>id (str): ID of the resource.</li> <li>source_data (dict): Aggregated source supplied data.</li> <li>user_data (dict): Aggregated user supplied data.</li> </ul> <p>And the following public methods:</p> <ul> <li>generate_source_data: Generates the source_data attribute and returns it.</li> <li>generate_user_data: Generates the user_data attribute and returns it.</li> <li>generate_inventory: Generates the inventory dictionary with the source     resource.</li> </ul>"},{"location":"source/#create-the-source-test-class","title":"Create the source test class","text":"<p>On <code>test/sources/</code> create your source class from this template. Substitute <code>{{ class_name }}</code> with your value.</p> <p>Also fill up the <code>self.desired_source_data</code> and <code>self.desired_user_data</code> with a representative template of the data you want to store into the inventory.</p> <pre><code>from clinv.sources import {{ class_name }}src\nfrom tests.sources import ClinvSourceBaseTestClass\nimport unittest\n\nclass Test{{ class_name }}Source(ClinvSourceBaseTestClass, unittest.TestCase):\n'''\n    Test the {{ class_name }} implementation in the inventory.\n    '''\n\n    def setUp(self):\n        super().setUp()\n        self.source_obj = {{ class_name }}src\n\n        # Initialize object to test\n        source_data = {}\n        user_data = {}\n        self.src = self.source_obj(source_data, user_data)\n\n        # What data we want to aggregate to our inventory\n        self.desired_source_data = {\n        }\n        self.desired_user_data = {\n        }\n\n        self.src.source_data = self.desired_source_data\n\n    def tearDown(self):\n        super().tearDown()\n\n    def test_generate_source_data_creates_expected_source_data_attrib(self):\n        # Mock here the call to your provider\n\n        self.src.source_data = {}\n\n        generated_source_data = self.src.generate_source_data()\n\n        self.assertEqual(\n            self.src.source_data,\n            self.desired_source_data,\n        )\n        self.assertEqual(\n            generated_source_data,\n            self.desired_source_data,\n        )\n\n    @unittest.skip('Not yet')\n    def test_generate_user_data_creates_expected_user_data_attrib(self):\n        generated_user_data = self.src.generate_user_data()\n\n        self.assertEqual(\n            self.src.user_data,\n            self.desired_user_data,\n        )\n        self.assertEqual(\n            generated_user_data,\n            self.desired_user_data,\n        )\n\n    @unittest.skip('Not yet')\n    def test_generate_user_data_doesnt_loose_existing_data(self):\n        user_key = [key for key in self.desired_user_data.keys()][0]\n        desired_user_data = {user_key: {}}\n        self.src.user_data = desired_user_data\n\n        self.src.generate_user_data()\n\n        self.assertEqual(\n            self.src.user_data,\n            desired_user_data,\n        )\n\n    @unittest.skip('Not yet')\n    def test_generate_inventory_return_empty_dict_if_no_data(self):\n        self.src.source_data = {}\n        self.assertEqual(self.src.generate_inventory(), {})\n\n    @unittest.skip('Not yet')\n    @patch('clinv.sources.{{ module_name }}.{{ class_name }}')\n    def test_generate_inventory_creates_expected_dictionary(\n        self,\n        resource_mock\n    ):\n        resource_id = '{{ resource_id }}'\n        self.src.user_data = self.desired_user_data\n\n        desired_mock_input = {\n            **self.src.user_data[resource_id],\n            **self.src.source_data[resource_id],\n        }\n\n        desired_inventory = self.src.generate_inventory()\n        self.assertEqual(\n            resource_mock.assert_called_with(\n                {\n                    resource_id: desired_mock_input\n                },\n            ),\n            None,\n        )\n\n        self.assertEqual(\n            desired_inventory,\n            {\n                resource_id: resource_mock.return_value\n            },\n        )\n</code></pre>"},{"location":"source/#create-the-source-class","title":"Create the source class","text":"<p>On <code>clinv/sources/</code> create your source class from this template. Substitute <code>{{ class_name }}</code> and <code>{{ class_id }}</code> with your values.</p> <pre><code>from clinv.sources import ClinvSourcesrc, ClinvGenericResource\n\n\nclass {{ class_name }}src(ClinvSourcesrc):\n\"\"\"\n    Class to gather and manipulate the {{ class_name }} resources.\n\n    Parameters:\n        source_data (dict): {{ class_name }}src compatible source_data\n        dictionary.\n        user_data (dict): {{ class_name }}src compatible user_data dictionary.\n\n    Public methods:\n        generate_source_data: Generates the source_data attribute and returns\n            it.\n        generate_user_data: Generates the user_data attribute and returns it.\n        generate_inventory: Generates the inventory dictionary with the source\n            resource.\n\n    Public attributes:\n        id (str): ID of the resource.\n        source_data (dict): Aggregated source supplied data.\n        user_data (dict): Aggregated user supplied data.\n        log (logging object):\n    \"\"\"\n\n    def __init__(self, source_data={}, user_data={}):\n        super().__init__(source_data, user_data)\n        self.id = '{{ class_id }}'\n\n    def generate_source_data(self):\n\"\"\"\n        Do aggregation of the source data to generate the source dictionary\n        into self.source_data, with the following structure:\n            {\n            }\n\n        Returns:\n            dict: content of self.source_data.\n        \"\"\"\n\n        self.log.info('Fetching {{ class_name }} inventory')\n        self.source_data = {}\n\n        return self.source_data\n\n    def generate_user_data(self):\n\"\"\"\n        Do aggregation of the user data to populate the self.user_data\n        attribute with the user_data.yaml information or with default values.\n\n        It needs the information of self.source_data, therefore it should be\n        called after generate_source_data.\n\n        Returns:\n            dict: content of self.user_data.\n        \"\"\"\n\n        return self.user_data\n\n    def generate_inventory(self):\n\"\"\"\n        Do aggregation of the user and source data to populate the self.inv\n        attribute with {{ class_name }} resources.\n\n        It needs the information of self.source_data and self.user_data,\n        therefore it should be called after generate_source_data and\n        generate_user_data.\n\n        Returns:\n            dict: {{ class_name }} inventory with user and source data\n        \"\"\"\n\n        inventory = {}\n\n        for resource_id, resource in self.source_data.items():\n            # Load the user_data into the source_data record\n            for key, value in self.user_data[resource_id].items():\n                resource[key] = value\n\n            inventory[resource_id] = {{ class_name }}({resource_id: resource})\n\n        return inventory\n</code></pre> <p>If you need to clean the dictionary created by your provider, use the <code>self.prune_dictionary</code> method.</p>"},{"location":"source/#create-the-generate_source_data-method","title":"Create the generate_source_data method","text":"<p>This method is meant to extract the information from your source, for example AWS and save it into the <code>self.source_data</code>, as well as return it.</p>"},{"location":"source/#create-the-generate_user_data-method","title":"Create the generate_user_data method","text":"<p>This method is meant to extract the information from the user, so it takes the resources saved on <code>self.source_data</code> and generates the basic template for each one and saves them into <code>self.user_data</code>.</p>"},{"location":"source/#create-the-generate_inventory-method","title":"Create the generate_inventory method","text":"<p>This method is meant to initiate the resource object of the source we're adding. This object doesn't exist yet, but we'll do that later.</p> <p>After initializing all the objects they are returned.</p>"},{"location":"source/#add-your-source-to-the-loaded-sources","title":"Add your source to the loaded sources","text":"<p>Import it in <code>clinv/inventory.py</code> and add it into the <code>active_source_plugins</code> variable</p>"},{"location":"source/#create-the-resource-class","title":"Create the resource class","text":"<p>On <code>clinv/sources/</code> create your source class from this template. Substitute <code>{{ class_name }}</code> and <code>{{ class_id }}</code> with your values.</p> <pre><code>class {{ class_name }}(ClinvGenericResource):\n\"\"\"\n    Class to extend the ClinvGenericResource abstract class. It gathers methods\n    and attributes for the {{ class_name }} resources.\n\n    Public methods:\n        print: Prints information of the resource.\n\n    Public properties:\n        name: Returns the name of the record.\n    \"\"\"\n\n    def __init__(self, raw_data):\n\"\"\"\n        Execute the __init__ of the parent class ClinvActiveResource.\n        \"\"\"\n\n        super().__init__(raw_data)\n</code></pre>"},{"location":"source/#create-the-resource-test-class","title":"Create the resource test class","text":"<pre><code>class Test{{ class_name }}(ClinvGenericResourceTests, unittest.TestCase):\n    def setUp(self):\n        self.module_name = '{{ module_name }}'\n        self.id = '{{ class_id }}'\n\n        super().setUp()\n\n        self.raw = {\n            # Example of the dictionary to initialize the object.\n        }\n        self.resource = {{ class_name }}(self.raw)\n\n    def tearDown(self):\n        super().tearDown()\n</code></pre> <p>Think if you can add more search filters in the object <code>search</code> method.</p>"},{"location":"source/#add-resource-to-the-reports","title":"Add resource to the reports","text":"<p>There are some reports that are generic, such as <code>list</code> or <code>print</code>, but there are some that still aren't.</p> <p>So you'll need to manually add your resource to <code>export</code> and <code>unassigned</code>.</p>"},{"location":"source/#add-resource-to-the-cli","title":"Add resource to the cli","text":"<p>For the reports that aren't generic add them in <code>clinv/cli.py</code>.</p>"},{"location":"source/#test-that-everything-works","title":"Test that everything works","text":"<p>Execute the following tasks</p> <ul> <li>Generate the new inventory <code>clinv generate</code>.</li> <li>Edit the <code>use_data.yml</code>.</li> <li>Regenerate the inventory and check that no information is lost.</li> <li>Check the different reports.</li> </ul>"},{"location":"source/#add-documentation","title":"Add documentation","text":"<p>Complete the README.md and History.md</p>"},{"location":"todo/","title":"Todo","text":""},{"location":"todo/#todo","title":"Todo","text":""},{"location":"todo/#hh","title":"HH","text":""},{"location":"todo/#h","title":"H","text":"<ul> <li>Add <code>clinv verify</code> to test:</li> <li>No user has changed it's policies attached</li> <li>No group has changed it's policies attached</li> <li>The group members are the ones that we desired</li> <li>Check if 2fa is enabled for users with password</li> <li> <p>the access keys are updated</p> </li> <li> <p>Add IAM policy, roles and instance profiles support</p> </li> <li>Add comments to ec2 instances, projects, services and informations</li> </ul>"},{"location":"todo/#m","title":"M","text":"<ul> <li>Add risk management support</li> <li>Autoscaling group support</li> <li>Add to <code>clinv verify</code> to check if there are deleted or terminated aws resources assigned to   projects.</li> <li>Create an input method <code>clinv create service</code></li> <li>Create an edit method <code>clinv edit ser_01</code></li> <li>Refactor the Source tests into a parent testcase to avoid duplicated code</li> <li>Service object access part divided by user type with each it's type of access and information it access</li> <li>Add related subcommand to get what resources are associated with a defined   resource (with the optional -n flag to specify the levels of association)</li> <li>Improve service search so if the children resources match, the service matches.</li> <li>Search also into the terminated resources with a specific flag. But by   default don't search on terminated (add a if self.state == terminated return   False on ClinvGenericResource.search()). (refactor from list services)</li> <li>Read the description from the AWS resources</li> </ul>"},{"location":"todo/#l","title":"L","text":"<ul> <li>Automatic alphabetic reindex of informations, services and projects when c generate</li> <li>Terminated report that shows the resources of terminated services, to check if they should be destroyed</li> <li>Create the --json flag for reports</li> </ul>"},{"location":"adr/001-refactor_to_domain_driven_design/","title":"Status","text":""},{"location":"adr/001-refactor_to_domain_driven_design/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/001-refactor_to_domain_driven_design/#context","title":"Context","text":"<p>The codebase of the project has grown old pretty fast, there are the next problems:</p> <ul> <li>The code structure doesn't comply with the domain driven design structure I'm using with the rest of my projects, that means that maintaining it is uncomfortable for me. I can't use the cookiecutter template to adapt the improvements I do on other projects.</li> <li>There is a high coupling between an adapter (aws) and the storage solution.</li> <li>I'm using argparse instead of click to define the cli</li> <li>A lot of the testing is done using mocks, instead of having a pyramid of unit     and e2e tests.</li> <li>The model and service functionality is all mixed up in the models.</li> <li>The performance is bad when you have many resources.</li> </ul>"},{"location":"adr/001-refactor_to_domain_driven_design/#proposals","title":"Proposals","text":"<ul> <li>Refactor the code to use the domain driven design structure.</li> <li>Make it compliant with the cookiecutter python     template.</li> <li>Migrate cli definition to click.</li> <li>Add type hints</li> </ul>"},{"location":"adr/001-refactor_to_domain_driven_design/#decision","title":"Decision","text":"<p>Implement the only proposal</p>"},{"location":"adr/001-refactor_to_domain_driven_design/#consequences","title":"Consequences","text":""},{"location":"adr/002-service-risk-assessment/","title":"Status","text":""},{"location":"adr/002-service-risk-assessment/#status","title":"Status","text":"<p>Draft</p>"},{"location":"adr/002-service-risk-assessment/#context","title":"Context","text":"<p>We start to have enough information in the inventory to give a rough idea of the security measures and risks of the different services, and it would be interesting to have an ordered list of services by some risk level that takes into account this data.</p> <p>The model can always be refined further to better reflect the reality, for example, if a service has different access methods one for admins and other for common users, but we'll start with what we have.</p>"},{"location":"adr/002-service-risk-assessment/#proposals","title":"Proposals","text":""},{"location":"adr/002-service-risk-assessment/#score-types","title":"Score types","text":"<p>Build three scores per service:</p> <ul> <li><code>risk</code>: Measures the danger level of the service, taking into account the     value of the information or detected service hazards.</li> <li><code>protection</code>: Measures the level of protection of the service.</li> <li><code>security</code>: Takes into account the above scores to output an overall one.</li> </ul>"},{"location":"adr/002-service-risk-assessment/#risk","title":"Risk","text":"<p>For the <code>risk</code> we may start with:</p> <ul> <li>The number of <code>Information</code> entities accessed by the service.</li> <li>The number of <code>Service</code>s that depend on the current one.</li> <li>A list of common risks.</li> </ul> <p>In the next iteration, we could give the <code>Information</code> model a <code>risk</code> attribute to refine even further that element.</p> <p>The list of common risks could be a <code>str</code> <code>Enum</code> similar to the <code>NetworkAccess</code> or the <code>AuthenticationMethod</code>.</p>"},{"location":"adr/002-service-risk-assessment/#protection","title":"Protection","text":"<p>For the <code>protection</code> score we may start with:</p> <ul> <li>A base score given by the <code>NetworkAccess</code> that's big enough to separate the     services despite the number of security  measures that they've got     implemented.</li> <li>A list of common security measures, it could be a <code>str</code> <code>Enum</code> similar to the     <code>NetworkAccess</code> or the <code>AuthenticationMethod</code>. Which one of them is the     authentication.</li> </ul>"},{"location":"adr/002-service-risk-assessment/#security","title":"Security","text":"<p>A simple subtraction of <code>protection</code> - <code>risk</code> may suffice.</p>"},{"location":"adr/002-service-risk-assessment/#how-to-give-values","title":"How to give values","text":"<p>So far we have based the possible cases of the elements in <code>str Enums</code>, we could use <code>IntEnums</code> but then we'd need to deduce the element name from a transformation from the <code>Enum</code> key, which won't be always the best. For example it would be difficult going from <code>TWOFA_KEY</code> to a user pleasant string.</p> <p>Another option would be to create <code>Entity</code> for each element with something like:</p> <pre><code>class Risk(Entity):\n    id_: RiskID\n    name: str\n    value: int\n</code></pre> <p>But then we'll need to:</p> <ul> <li>Populate the initial values of the database</li> <li>Change the schema of the services</li> <li>Tweak the <code>services.build_choices</code> to include the schema changes, although it     looks easy.</li> </ul> <p>On the other side:</p> <ul> <li>It will be easier for downstream users to define their own network accesses,     authenticated methods, security measures...</li> <li>It will be easier to expand the model for example with different access     methods for each service.</li> </ul>"},{"location":"adr/002-service-risk-assessment/#how-to-add-new-risk-or-security-measure","title":"How to add new risk or security measure","text":"<p>We can reuse most of the <code>add</code> cli method, but it would be kind of cool if at the end of the form, it supported the addition of the element to the existing services.</p>"},{"location":"adr/002-service-risk-assessment/#how-to-deal-with-the-change-of-schema","title":"How to deal with the change of schema","text":"<p>We'll give a script to create the base elements and show a warning in the commit of the database schema and what steps needs to be done.</p>"},{"location":"adr/002-service-risk-assessment/#decision","title":"Decision","text":"<ul> <li>Create two new models <code>Risk</code> and <code>SecurityMeasure</code>.</li> <li>Tweak the <code>add</code> entrypoint to accept these two new models.</li> <li>Create a new entrypoint to return an ordered list of services based on the   stored information.</li> <li>Create a script to do the initial population of the database.</li> </ul>"},{"location":"adr/002-service-risk-assessment/#consequences","title":"Consequences","text":""},{"location":"adr/003-improve-cli-performance/","title":"Status","text":""},{"location":"adr/003-improve-cli-performance/#status","title":"Status","text":"<p>Draft</p>"},{"location":"adr/003-improve-cli-performance/#context","title":"Context","text":"<p>The CLI starts having bad performance, specially:</p> <ul> <li><code>clinv add ser</code>: Due to the <code>service.build_choices</code>.</li> </ul>"},{"location":"adr/003-improve-cli-performance/#proposals","title":"Proposals","text":""},{"location":"adr/003-improve-cli-performance/#servicebuild_choices","title":"<code>service.build_choices</code>","text":"<p>We could:</p> <ul> <li>Migrate to another database backend to speed up the queries.</li> <li>Build the choices on the go instead of at initialization</li> <li>Save the choices in a key-value storage either redis or a local cache</li> </ul>"},{"location":"adr/003-improve-cli-performance/#decision","title":"Decision","text":""},{"location":"adr/003-improve-cli-performance/#consequences","title":"Consequences","text":""},{"location":"adr/adr/","title":"Adr","text":"<p>ADR are short text documents that captures an important architectural decision made along with its context and consequences.</p>"}]}