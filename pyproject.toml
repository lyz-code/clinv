# --------- Autoimport -------------

[tool.autoimport.common_statements]
"ServiceFactory" = "from tests.factories import ServiceFactory"
"ASGFactory" = "from tests.factories import ASGFactory"
"EC2Factory" = "from tests.factories import EC2Factory"
"IAMUserFactory" = "from tests.factories import IAMUserFactory"
"IAMGroupFactory" = "from tests.factories import IAMGroupFactory"
"RDSFactory" = "from tests.factories import RDSFactory"
"Route53Factory" = "from tests.factories import Route53Factory"
"S3Factory" = "from tests.factories import S3Factory"
"SecurityGroupFactory" = "from tests.factories import SecurityGroupFactory"
"VPCFactory" = "from tests.factories import VPCFactory"
"InformationFactory" = "from tests.factories import InformationFactory"
"PersonFactory" = "from tests.factories import PersonFactory"
"ProjectFactory" = "from tests.factories import ProjectFactory"

# --------- Poetry -------------
[tool.poetry]
name = "clinv"
version = "1.3.0"
description = "DevSecOps command line asset inventory"
authors = ["Lyz <lyz-code-security-advisories@riseup.net>"]
license = "GPL-3.0-only"
readme = "README.md"
homepage = "https://github.com/lyz-code/clinv"
documentation = "https://lyz-code.github.io/clinv"
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Utilities",
    "Natural Language :: English",
]
include = ["clinv/py.typed"]

[tool.poetry.urls]
"Issues" = "https://github.com/lyz-code/clinv/issues"

[tool.poetry.scripts]
autodev = "autodev.entrypoints.cli:cli"
clinv = "clinv.entrypoints.cli:cli"

[tool.poetry.dependencies]
python = ">=3.7, <=3.10"
click = "^8.0.3"
boto3 = "^1.20.24"
repository-orm = ">=0.7.0"
rich = "^10.16.0"
requests = "^2.26.0"
goodconf = {extras = ["yaml"], version = "^2.0.1"}

[tool.poetry.dev-dependencies]

# Testing
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-xdist = "^2.4.0"
pytest-freezegun = "^0.4.2"
pydantic-factories = "^0.5.0"

# Linting
yamllint = "^1.26.3"
flakehell = "^0.9.0"
flake8-aaa = "^0.12.0"
flake8-annotations = "^2.7.0"
flake8-annotations-complexity = "^0.0.6"
flake8-typing-imports = "^1.11.0"
flake8-bugbear = "^21.11.29"
flake8-debugger = "^4.0.0"
flake8-fixme = "^1.1.1"
flake8-markdown = "^0.3.0"
flake8-mutable = "^1.2.0"
flake8-pytest = "^1.3"
flake8-pytest-style = "^1.5.1"
flake8-simplify = "^0.14.2"
flake8-variables-names = "^0.0.4"
flake8-comprehensions = "^3.7.0"
flake8-expression-complexity = "^0.0.9"
flake8-use-fstring = "^1.3"
flake8-eradicate = "^1.2.0"
flake8-docstrings = "^1.6.0"
pre-commit = "^2.16.0"
pep8-naming = "^0.12.1"
dlint = "^0.12.0"
pylint = "^2.12.2"

# Remove the next dependency when https://github.com/flakehell/flakehell/issues/22
# is resolved
flake8 = "^3.9.2"

# Security
safety = "^1.10.3"
bandit = "^1.7.1"

# Type checkers
mypy = "^0.910"

# Formatters
autoimport = "^0.10.0"
black = "^21.12b0"
isort = "^5.10.1"
yamlfix = "^0.8.0"

# Documentation
mkdocs = "^1.2.3"
mkdocs-git-revision-date-localized-plugin = "^0.11"
mkdocs-htmlproofer-plugin = "^0.7.0"
mkdocs-minify-plugin = "^0.5.0"
mkdocs-autolinks-plugin = "^0.4.0"
mkdocs-material = "^8.0.5"
mkdocstrings = "^0.16.2"
markdown-include = "^0.6.0"
mkdocs-section-index = "^0.3.2"

# Dependency maintenance
# Until https://github.com/python-poetry/poetry/issues/461 is solved
poetryup = "^0.3.15"
moto = "^2.2.19"
coverage = {extras = ["toml"], version = "^6.2"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# --------- Commitizen -------------

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.3.0"
tag_format = "$version"
version_files = [
    "pyproject.toml:version",
    "src/clinv/version.py",
]

# --------- Black -------------

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

# --------- Pytest -------------

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vv --tb=short -n auto"
norecursedirs = [
    ".tox",
    ".git",
    "*/migrations/*",
    "*/static/*",
    "docs",
    "venv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "secondary: mark tests that use functionality tested in the same file (deselect with '-m \"not secondary\"')"
]

# --------- Coverage -------------

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Type checking can not be tested
    'if TYPE_CHECKING:',

    # Ignore the Abstract classes definition
    'raise NotImplementedError',
]

# --------- Isort -------------

[tool.isort]
profile = "black"
src_paths = ["src", "test"]

# --------- Flakehell -------------

[tool.flakehell]
format = "grouped"
max_line_length = 88
show_source = true
docstring-convention = "google"
extended_default_ignore=[]  # Until https://github.com/flakehell/flakehell/issues/10 is solved

[tool.flakehell.plugins]
flake8-aaa = ["+*"]
flake8-annotations = [
  "+*",
  "-ANN101", # There is usually no need to type the self argument of class methods.
  "-ANN102", # There is usually no need to type the cls argument of class methods.
]
flake8-annotations-complexity = ["+*"]
flake8-bugbear = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-docstrings = ["+*"]
flake8-eradicate = ["+*"]
flake8-expression-complexity = ["+*"]
flake8-fixme = ["+*"]
flake8-markdown = ["+*"]
flake8-mutable = ["+*"]
flake8-pytest = ["+*"]
flake8-pytest-style = ["+*"]
flake8-simplify = ["+*"]
flake8-use-fstring = [
  "+*",
  '-FS003' # f-string missing prefix
]
flake8-typing-imports = [
  "+*",
  "-TYP001", # guard import by `if False:  # TYPE_CHECKING`: TYPE_CHECKING (not in
             #   3.5.0, 3.5.1). We don't support Python < 3.6
]
flake8-variables-names = ["+*"]
dlint = ["+*"]
pylint = [
  "+*",
  "-C0411", # %s should be placed before %s,
            # see https://github.com/PyCQA/pylint/issues/2175 and https://github.com/PyCQA/pylint/issues/1797
  "-W1203", # Use %s formatting in logging functions. Deprecated rule in favor of
            # f-strings.
  "-W1201", # Use lazy % formatting in logging functions. Deprecated rule in favor of
            # f-strings.
  "-C0301", # Lines too long. Already covered by E501.
]
mccabe = ["+*"]
pep8-naming = ["+*"]
pycodestyle = [
  "+*",
  "-W503", # No longer applies, incompatible with newer version of PEP8
           # see https://github.com/PyCQA/pycodestyle/issues/197
           # and https://github.com/psf/black/issues/113
]
pyflakes = ["+*"]

[tool.flakehell.exceptions."tests/"]
flake8-docstrings = [
  "-D400", # First line should end with a period
  "-D205"  # 1 blank line required between summary line and description
]
flake8-annotations = [
  "-ANN001"
]
pylint = [
  "-R0201", # Method could be a function. Raised because the methods of a test class
            # don't use the self object, which is not wrong.
]

[tool.flakehell.exceptions."tests/factories.py"]
pylint = [
  "-R0903", # Too few methods warning, but is the way to define factoryboy factories.
]

[tool.flakehell.exceptions."tests/unit/test_views.py"]
pycodestyle = [
  "-E501", # lines too long. As we are testing the output of the terminal, the test is
           # cleaner if we show the actual result without splitting long lines.
]

# --------- Pylint -------------
[tool.pylint.'TYPECHECK']
generated-members = "sh"

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"

# --------- Mypy -------------

[tool.mypy]
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
# Required to not have  error: Untyped decorator makes function on fixtures and
# parametrize decorators
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "pytest",
    "boto3",
    "botocore.*",
    "goodconf",
    "moto",
]
ignore_missing_imports = true
